<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ University of Illinois/NCSA
  ~ Open Source License
  ~
  ~ Copyright (c) 2008, NCSA.  All rights reserved.
  ~
  ~ Developed by:
  ~ The Automated Learning Group
  ~ University of Illinois at Urbana-Champaign
  ~ http://www.seasr.org
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining
  ~ a copy of this software and associated documentation files (the
  ~ "Software"), to deal with the Software without restriction, including
  ~ without limitation the rights to use, copy, modify, merge, publish,
  ~ distribute, sublicense, and/or sell copies of the Software, and to
  ~ permit persons to whom the Software is furnished to do so, subject
  ~ to the following conditions:
  ~
  ~ Redistributions of source code must retain the above copyright
  ~ notice, this list of conditions and the following disclaimers.
  ~
  ~ Redistributions in binary form must reproduce the above copyright
  ~ notice, this list of conditions and the following disclaimers in
  ~ the documentation and/or other materials provided with the distribution.
  ~
  ~ Neither the names of The Automated Learning Group, University of
  ~ Illinois at Urbana-Champaign, nor the names of its contributors may
  ~ be used to endorse or promote products derived from this Software
  ~ without specific prior written permission.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  ~ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  ~ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  ~ IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE
  ~ FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  ~ CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  ~ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
  -->

<project name="SEASR-Commons" default="dist">
    <import file="common.xml" />

   <!--#################### Project Properties #########################-->

    <property name="version" value="1.4.12"/>
    <property name="debug" value="true"/>
    <property name="compile.target" value="1.5"/>

    <property name="src.dir" value="${basedir}/src"/>
    <property name="src.test.dir" value="${basedir}/src-test"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="build.dir" value="${basedir}/build/classes"/>
    <property name="build.test.dir" value="${basedir}/build/classes-test"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="test.dir" value="${basedir}/test"/>

    <property name="version.template" value="${basedir}/version.tpl"/>
    <property name="version.file" value="${src.dir}/org/seasr/meandre/support/generic/Version.java"/>


    <!--#################### CLASS PATHS ####################-->

    <path id="build.classpath">
        <pathelement location="${build.dir}"/>
        <path refid="lib.classpath"/>
    </path>

    <path id="test.classpath">
        <pathelement location="${build.test.dir}"/>
        <path refid="build.classpath"/>
    </path>

    <path id="lib.classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
    </path>

    <!--######################### BUILD TARGETS ###########################-->

    <target name="init">
        <tstamp>
            <format property="TIMESTAMP" pattern="MMM d, yyyy h:mm:ssa Z"/>
        </tstamp>
    </target>

    <target name="prepare" depends="init" description="-> performs necessary preparation tasks for the build">
        <svn refid="svn.settings">
            <wcVersion path="${basedir}" prefix="svn.root."/>
        </svn>

        <condition property="svn_revision" value="${svn.root.revision.max-with-flags}" else="">
            <isset property="svn.root.revision.max-with-flags"/>
        </condition>

        <property name="revision" value="${svn_revision}"/>

        <copy file="${version.template}" toFile="${version.file}" overwrite="true">
            <filterset>
                <filter token="VERSION" value="${version}"/>
                <filter token="REVISION" value="${revision}"/>
            </filterset>
        </copy>
    </target>

    <target name="clean" description="-> removes all auto-generated files/folders">
        <delete dir="${build.dir}"/>
        <delete dir="${build.test.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${test.dir}/clover"/>
        <delete dir="${test.dir}/xml"/>
        <delete dir="${test.dir}/report"/>
    </target>

    <target name="compile" depends="prepare" description="-> compiles the project code">
        <mkdir dir="${build.dir}"/>
        <javac target="${compile.target}" source="${compile.target}" srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.classpath" debug="${debug}" includeantruntime="false"/>
    </target>

    <target name="compile-tests" depends="compile" description="-> compiles the test code">
        <mkdir dir="${build.test.dir}"/>
        <javac target="${compile.target}" source="${compile.target}" srcdir="${src.test.dir}" destdir="${build.test.dir}" classpathref="build.classpath" debug="${debug}" includeantruntime="false"/>
    </target>

    <target name="run-tests" depends="compile-tests" description="-> runs the test suite">
        <mkdir dir="${test.dir}/xml"/>
        <junit fork="yes" printsummary="yes" showoutput="yes" haltonfailure="yes">
            <classpath>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <classpath refid="test.classpath"/>
            <formatter type="xml"/>

            <batchtest todir="${test.dir}/xml">
                <fileset dir="${src.test.dir}" includes="**/*Test*.java"/>
            </batchtest>
        </junit>
    </target>

    <target  name="tests-report" description="-> creates a test report for the test suite">
        <mkdir dir="${test.dir}/report"/>
        <junitreport todir="${test.dir}/xml">
            <fileset dir="${test.dir}/xml" includes="TEST-*.xml"/>
            <report format="noframes" todir="${test.dir}/report"/>
        </junitreport>
        <echo message="Report at: file://${test.dir}/report/junit-noframes.html"/>
    </target>

    <target name="dist" depends="compile" description="-> creates project  distribution">
        <mkdir dir="${dist.dir}"/>

        <jar destfile="${dist.dir}/seasr-commons-${version}.jar" basedir="${build.dir}" excludes="org/seasr/meandre/support/generic/io/webdav/**">
            <manifest>
                <attribute name="Implementation-Title" value="SEASR Commons"/>
                <attribute name="Implementation-Version" value="${version}.${revision}"/>
                <attribute name="Implementation-Vendor" value="NCSA/ALG"/>
                <attribute name="Build-Date" value="${TIMESTAMP}"/>
                <attribute name="Built-By" value="${user.name}"/>
            </manifest>

            <fileset dir="${src.dir}" excludes="org/seasr/meandre/support/generic/io/webdav/**"/>
        </jar>

        <jar destfile="${dist.dir}/webdavclient-${version}.jar" basedir="${build.dir}" includes="org/seasr/meandre/support/generic/io/webdav/**">
            <manifest>
                <attribute name="Implementation-Title" value="WebdavClient"/>
                <attribute name="Implementation-Version" value="${version}.${revision}"/>
                <attribute name="Implementation-Vendor" value="NCSA/ALG"/>
                <attribute name="Build-Date" value="${TIMESTAMP}"/>
                <attribute name="Built-By" value="${user.name}"/>
            </manifest>

            <fileset dir="${src.dir}" includes="org/seasr/meandre/support/generic/io/webdav/**"/>
        </jar>

        <jar destfile="${dist.dir}/webdavclient-deps-${version}.jar" basedir="${build.dir}" includes="org/seasr/meandre/support/generic/io/webdav/**">
            <manifest>
                <attribute name="Implementation-Title" value="WebdavClient"/>
                <attribute name="Implementation-Version" value="${version}.${revision}"/>
                <attribute name="Implementation-Vendor" value="NCSA/ALG"/>
                <attribute name="Build-Date" value="${TIMESTAMP}"/>
                <attribute name="Built-By" value="${user.name}"/>
            </manifest>

            <fileset dir="${src.dir}" includes="org/seasr/meandre/support/generic/io/webdav/**"/>

            <zipgroupfileset dir="${lib.dir}">
                <include name="httpclient*.jar"/>
                <include name="httpcore*.jar"/>
                <include name="httpmime*.jar"/>
                <include name="apache-mime4j*.jar"/>
                <include name="commons-codec*.jar"/>
                <include name="commons-logging*.jar"/>
            </zipgroupfileset>
        </jar>
    </target>

</project>

<!-- DO NOT EDIT BELOW THIS LINE PLEASE -->
<!-- vim:sw=4:softtabstop=4:expandtab
-->
